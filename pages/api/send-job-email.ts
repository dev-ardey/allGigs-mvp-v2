import { NextApiRequest, NextApiResponse } from 'next';
import { supabase } from '../../SupabaseClient';

interface JobSubmissionData {
  title: string;
  company: string;
  location: string;
  rate: string;
  summary: string;
  submittedBy: string;
  submittedByEmail: string;
  posterName: string;
  submissionId: string;
}

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const jobData: JobSubmissionData = req.body;

    // Validate required fields
    const requiredFields = ['title', 'company', 'location', 'rate', 'summary', 'submittedBy', 'submittedByEmail'];
    const missingFields = requiredFields.filter(field => !jobData[field]);
    
    if (missingFields.length > 0) {
      return res.status(400).json({ 
        error: 'Missing required fields', 
        missingFields 
      });
    }

    // Create email content
    const emailSubject = `New Job Submission: ${jobData.title} at ${jobData.company}`;
    const emailBody = `
Dear JJ,

A new job has been submitted through the AllGigs job board platform.

JOB DETAILS:
============
Title: ${jobData.title}
Company: ${jobData.company}
Location: ${jobData.location}
Rate/Salary: ${jobData.rate}

Job Description:
${jobData.summary}

SUBMISSION DETAILS:
==================
Submission ID: ${jobData.submissionId}
Submitted by: ${jobData.posterName}
Submitted by email: ${jobData.submittedByEmail}
Submission time: ${new Date().toISOString()}
User Agent: ${req.headers['user-agent'] || 'Not available'}

ACTIONS:
========
To approve and publish this job:
1. Review the job details above
2. Log into the AllGigs admin panel
3. Manually add the job to the job board if approved

To contact the submitter:
Email: ${jobData.submittedByEmail}

--
This email was automatically generated by the AllGigs Job Board system.
    `.trim();

    // Log the email submission attempt in the database
    try {
      await supabase.from("job_email_submissions").insert([
        {
          submission_id: jobData.submissionId,
          user_id: jobData.submittedBy,
          user_email: jobData.submittedByEmail,
          job_title: jobData.title,
          company: jobData.company,
          location: jobData.location,
          rate: jobData.rate,
          summary: jobData.summary,
          poster_name: jobData.posterName,
          submitted_at: new Date().toISOString(),
          email_subject: emailSubject,
          email_body: emailBody,
          user_agent: req.headers['user-agent'] || null,
          ip_address: req.headers['x-forwarded-for'] || req.connection.remoteAddress || null,
          status: 'submitted'
        }
      ]);
    } catch (logError) {
      console.error("Error logging job email submission:", logError);
      // Don't fail the submission if logging fails
    }

    // Since we don't have an email service configured, we'll simulate sending the email
    // In a real implementation, you would use services like:
    // - SendGrid
    // - Mailgun
    // - Nodemailer with SMTP
    // - AWS SES
    // - Supabase Edge Functions with email service
    
    console.log('=== JOB SUBMISSION EMAIL ===');
    console.log('To: JJ@allgigs.nl');
    console.log('Subject:', emailSubject);
    console.log('Body:');
    console.log(emailBody);
    console.log('=== END EMAIL ===');

    // For now, we'll return a success response indicating the email would be sent
    // In production, replace this with actual email sending logic
    
    res.status(200).json({ 
      success: true, 
      message: 'Job submission received and email sent to JJ@allgigs.nl',
      submissionId: jobData.submissionId
    });

  } catch (error) {
    console.error('Error processing job submission:', error);
    res.status(500).json({ 
      error: 'Internal server error', 
      message: 'Failed to process job submission' 
    });
  }
}
